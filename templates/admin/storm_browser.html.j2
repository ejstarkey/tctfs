{% extends "layout.html.j2" %}

{% block title %}Storm Browser - Admin{% endblock %}

{% block content %}
<div class="admin-container">
    <div class="admin-header">
        <div>
            <h1>üå™Ô∏è Storm Browser</h1>
            <p class="subtitle">View and manage all tracked storms</p>
        </div>
        <button onclick="triggerReingestion()" class="action-button primary">
            üîÑ Re-ingest All Storms
        </button>
    </div>

    <!-- Filter -->
    <div class="filter-bar">
        <select id="status-filter" class="filter-select" onchange="filterStorms()">
            <option value="">All Statuses</option>
            <option value="active" selected>Active</option>
            <option value="dormant">Dormant</option>
            <option value="archived">Archived</option>
        </select>
    </div>

    <!-- Storms Grid -->
    <div class="storms-grid">
        {% for storm in storms %}
        <div class="storm-card" data-status="{{ storm.status }}">
            <div class="storm-card-header">
                <div>
                    <h3>{{ storm.name or 'UNNAMED' }}</h3>
                    <span class="storm-id">{{ storm.storm_id }}</span>
                </div>
                <span class="status-badge status-{{ storm.status }}">{{ storm.status|upper }}</span>
            </div>
            
            <div class="storm-card-info">
                <div class="info-row">
                    <span class="label">Basin:</span>
                    <span class="value">{{ storm.basin }}</span>
                </div>
                <div class="info-row">
                    <span class="label">Last Update:</span>
                    <span class="value">{{ storm.last_seen.strftime('%Y-%m-%d %H:%M UTC') if storm.last_seen else 'N/A' }}</span>
                </div>
                <div class="info-row">
                    <span class="label">Advisories:</span>
                    <span class="value">{{ storm.last_advisory_no or 0 }}</span>
                </div>
            </div>

            <div class="storm-card-actions">
                <button onclick="reIngestStorm('{{ storm.storm_id }}')" class="action-btn secondary">
                    Re-ingest
                </button>
                <button onclick="rebuildForecast('{{ storm.storm_id }}')" class="action-btn secondary">
                    Rebuild Forecast
                </button>
                <a href="{{ url_for('storm_detail.detail', storm_id=storm.storm_id) }}" class="action-btn primary">
                    View Storm
                </a>
            </div>
        </div>
        {% endfor %}
    </div>
</div>

<style>
.admin-container {
    max-width: 1600px;
    margin: 0 auto;
    padding: 2rem;
}

.admin-header {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.admin-header h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 0.5rem;
}

.subtitle {
    color: #6b7280;
    font-size: 1rem;
}

.action-button {
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-weight: 600;
    border: none;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 1rem;
}

.action-button.primary {
    background: #667eea;
    color: white;
}

.action-button.primary:hover {
    background: #5568d3;
}

.filter-bar {
    background: white;
    border-radius: 16px;
    padding: 1rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
}

.filter-select {
    padding: 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 10px;
    font-size: 0.875rem;
    font-weight: 500;
    background: white;
    cursor: pointer;
}

.storms-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
}

.storm-card {
    background: white;
    border-radius: 16px;
    padding: 1.5rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    transition: all 0.3s;
}

.storm-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 30px rgba(0,0,0,0.15);
}

.storm-card-header {
    display: flex;
    justify-content: space-between;
    align-items: start;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f3f4f6;
}

.storm-card-header h3 {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 0.25rem;
}

.storm-id {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
}

.status-badge {
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
}

.status-active {
    background: #fee2e2;
    color: #dc2626;
}

.status-dormant {
    background: #fef3c7;
    color: #d97706;
}

.status-archived {
    background: #e5e7eb;
    color: #6b7280;
}

.storm-card-info {
    margin-bottom: 1rem;
}

.info-row {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
    font-size: 0.875rem;
}

.info-row .label {
    color: #6b7280;
    font-weight: 500;
}

.info-row .value {
    color: #1f2937;
    font-weight: 600;
}

.storm-card-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.action-btn {
    flex: 1;
    padding: 0.5rem 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.875rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s;
    text-decoration: none;
    text-align: center;
    display: inline-block;
}

.action-btn.primary {
    background: #667eea;
    color: white;
}

.action-btn.primary:hover {
    background: #5568d3;
}

.action-btn.secondary {
    background: #f3f4f6;
    color: #1f2937;
}

.action-btn.secondary:hover {
    background: #e5e7eb;
}
</style>

<script>
function filterStorms() {
    const filter = document.getElementById('status-filter').value;
    const cards = document.querySelectorAll('.storm-card');
    
    cards.forEach(card => {
        const status = card.dataset.status;
        if (!filter || status === filter) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

function triggerReingestion() {
    if (confirm('Re-ingest all active storms? This may take a few minutes.')) {
        alert('Re-ingestion triggered! Check logs for progress.');
        // TODO: Call API endpoint
    }
}

function reIngestStorm(stormId) {
    if (confirm(`Re-ingest storm ${stormId}?`)) {
        alert(`Re-ingesting ${stormId}...`);
        // TODO: Call API endpoint
    }
}

function rebuildForecast(stormId) {
    if (confirm(`Rebuild forecast for ${stormId}?`)) {
        alert(`Rebuilding forecast for ${stormId}...`);
        // TODO: Call API endpoint
    }
}

// Auto-filter on load
document.addEventListener('DOMContentLoaded', filterStorms);
</script>
{% endblock %}
